@page "/user/id/{user_id:int}"

@inject HttpClient Http
@using ParallelApp.Shared.Models

<PageTitle>User</PageTitle>

<br />
<h2>Edit profile</h2>
<br />


<MudGrid>
    <MudItem md=4 sm=6 xs=12  >
        <MudCard Elevation="1" Square="false">
            <MudCardHeader>
                <CardHeaderAvatar>
                <!--<MudAvatar Image="https://i.imgur.com/o9fpo46.png" />-->
                    <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" ActivationEvent="@MouseEvent.RightClick">
                        <ActivatorContent >
                            

                            <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true" @onmouseleave="(()=>ChangeVisible(false))" Style="border-radius:50%">
                                <MudIcon Icon="@Icons.Material.Filled.Image" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary"></MudIcon>
                            </MudOverlay>

                            <MudAvatar @onmouseenter="(()=>ChangeVisible(true))" Image="@user.ProfilePictureUrl" Style="height:80px; width:80px; font-size:2rem;"/>
                            
                        </ActivatorContent>
                        <ChildContent>
                            <MudText>Edit profile picture</MudText>
                            <MudDivider/>
                            <MudMenuItem>Change</MudMenuItem>
                            <MudMenuItem>Remove</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                    
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body2"><b>@user.FirstName @user.LastName</b></MudText>
                    <MudText Typo="Typo.caption">@user.Email</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                
                <MudText>WhatsApp</MudText>
                <MudSwitch @bind-Checked="@Label_Switch2" Label="Success" Color="Color.Success" />
                <MudTextField Label="WhatsApp" @bind-Value="TextValue" Adornment="Adornment.Start" AdornmentIcon="@Icons.Custom.Brands.WhatsApp" AdornmentColor="Color.Success" Variant="Variant.Text"></MudTextField>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem md=8 sm=6 xs=12  >
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Ime</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 ><MudText>Teo</MudText></MudItem>
                             
                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Prezime</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 ><MudText>Ivančević</MudText></MudItem>
                             
                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Email</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 ><MudText>teo.ivancevic@skole.hr</MudText></MudItem> 

                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Phone #</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 ><MudText>+385 99 379 0000</MudText></MudItem>

                    <MudDivider />

                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Škola</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 ><MudText>XV. gimnazija</MudText></MudItem>

                    <MudItem sm=3 xs=5 ><MudText Align="Align.Right"><b>Tagovi</b></MudText></MudItem>
                    <MudItem sm=9 xs=7 >
                        
                        @foreach(var tag in userTags)
                        {
                            @if(tag.Type == "općenito")
                            {
                                <MudChip Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"};")" OnClose="(()=>RemoveUserTag(user.Id, tag.Id))" Size="Size.Small">@tag.Name</MudChip>
                            }
                            else
                            {
                                <MudChip Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"};")" Size="Size.Small">@tag.Name</MudChip>   
                            }
                            
                        }
                        
                        
                        <MudMenu MaxHeight="300" Dense="true">
                            <ActivatorContent>
                                <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Discount" />
                            </ActivatorContent>
                            <ChildContent>
                                <!--
                                <MudMenuItem>Search tags</MudMenuItem>
                                <MudDivider/>
                                -->
                                <MudMenuItem Disabled="true">All tags <MudIcon Icon='@Icons.Material.Outlined.Info' Style="height: 20px; width: 20px"></MudIcon></MudMenuItem>
                                @foreach(var tag in schoolTags)
                                {
                                    @if (!(userTags.Contains(tag)))
                                    {
                                        <MudMenuItem OnClick="(()=>AddUserTag(user.Id, tag.Id))"><MudAvatar Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"}; height:15px; width:15px")" ></MudAvatar> @tag.Name</MudMenuItem>
                                    }
                                }
                                <!--<MudMenuItem><MudChip Style="@($"background: {"#ED2323"}; color:{"#FFFFFF"};")" Size="Size.Small"></MudChip>Gaming</MudMenuItem>-->
                                <!--<MudMenuItem Tag="1" OnClick="(()=>AddUserTag(1))"><MudAvatar Style="@($"background: {"#ED2323"}; color:{"#FFFFFF"}; height:15px; width:15px")" ></MudAvatar> Gaming</MudMenuItem>
                                <MudMenuItem Tag="1" OnClick="(()=>AddUserTag(1))"><MudAvatar Style="@($"background: {"#37FCFF"}; color:{"#FFFFFF"}; height:15px; width:15px")" ></MudAvatar> IPHO</MudMenuItem>
                                <MudMenuItem Tag="1" OnClick="(()=>AddUserTag(1))"><MudAvatar Style="@($"background: {"#7B37FF"}; color:{"#FFFFFF"}; height:15px; width:15px")" ></MudAvatar> Natjecanja</MudMenuItem>
                                <MudMenuItem Tag="1" OnClick="(()=>AddUserTag(1))"><MudAvatar Style="@($"background: {"#58FF37"}; color:{"#FFFFFF"}; height:15px; width:15px")" ></MudAvatar> Hrvatski jezik</MudMenuItem>-->
                            </ChildContent>
                        </MudMenu>
                        
                    </MudItem>

                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    [Parameter] 
    public int user_id { get; set; }
    User user = new User();
    private bool isVisible;
    
    //privremeno za isprobavanje
    private bool Label_Switch2;
    private string TextValue;

    List<Tag> schoolTags = new List<Tag>();
    List<Tag> userTags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        await GetUserById(user_id);
        await GetUserTags(user.Id);
        await GetSchoolTags(user.SchoolId);
    }

    private void ChangeVisible(bool vis)
    {
        isVisible = vis;
    }



    private async Task GetUserById(int id)
    {
        //user = await Http.GetFromJsonAsync<User>("Api/Userdapper/GetUserById/" + user_id.ToString());
        user = await Http.GetFromJsonAsync<User>("api/user/getuserbyid/" + id.ToString());
        StateHasChanged();
        //await Task.Delay(1);
    }

    private async Task GetUserTags(int id)
    {
        userTags = await Http.GetFromJsonAsync<List<Tag>>("api/user/getusertags/" + id.ToString());
    }

    private async Task GetSchoolTags(int school_id)
    {
        schoolTags = await Http.GetFromJsonAsync<List<Tag>>("api/school/getschooltags/" + school_id.ToString());
    }

    private async void AddUserTag(int user_id, int tag_id)
    {
        using var response = await Http.PostAsJsonAsync("api/user/addusertag/" + user_id.ToString(), tag_id);
        await GetUserTags(user_id);
        StateHasChanged();
    }

    private async void RemoveUserTag(int user_id, int tag_id)
    {
        using var response = await Http.DeleteAsync("api/user/removeusertag/" + user_id.ToString() + "/" + tag_id.ToString());
        await GetUserTags(user_id);
        StateHasChanged();
    }

}
