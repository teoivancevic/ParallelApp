@page "/appadmin"

@attribute [Authorize]  

@inject AuthenticationStateProvider AuthState
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MudBlazor.Utilities
@using ParallelApp.Shared.Models

<PageTitle>Administrator</PageTitle>
<br/>
<MudText Typo="Typo.h4">Administrator</MudText>
<br/>


@if (appUser != null) //ne radi??? ne kuzim zas
{ 

@if(appUser.Role.Name == "ucenik")
{
  
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="false" PanelClass="pa-6" Color="Color.Primary">
    
    
    <MudTabPanel Text="Tagovi" Icon="@Icons.Material.Filled.Discount">
        
        <!--varijanta koja se pokazuje kad je VELIKI ekran-->
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudTextField @bind-Value="searchTagString" Immediate="true" Variant="Variant.Outlined" Placeholder="Pretraži tagove" Margin="Margin.Dense"  AdornmentIcon="@Icons.Material.Outlined.Search" Adornment="Adornment.Start"></MudTextField>
        </MudHidden>
        <MudToolBar>
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
                <MudTextField @bind-Value="searchTagString" Immediate="true" Variant="Variant.Outlined" Placeholder="Pretraži tagove" Margin="Margin.Dense"  AdornmentIcon="@Icons.Material.Outlined.Search" Adornment="Adornment.Start" Clearable="true"></MudTextField>
            </MudHidden>
            <MudIconButton @onclick="(()=>RefreshTags(1))" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Class="mr-5" Color="Color.Inherit"/>
            <!--
            <MudTextField @bind-Value="TextValue" Label="Search" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Class="mr-5"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Search" Size="Size.Small" Class="mr-5"/>
            -->
            @if (selectedTag != null)
            {
                <MudMenu>
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mr-5"  Color="Color.Inherit"/>
                    </ActivatorContent>
                    <ChildContent>
                        <MudText Style="color: #C6C6C6" Align="Align.Center">Uredi Tag</MudText>
                        <MudTextField @bind-Value="@editTag.Name" Class="ml-5 mr-5" AdornmentIcon="@Icons.Material.Outlined.Discount" Adornment="Adornment.Start" Placeholder="Naziv Taga" Variant="Variant.Text"></MudTextField>
                        <br/>
                        <MudColorPicker @bind-Text="@editTag.Color" DisableToolbar="true" DisableAlpha="true" DisableColorField="false" DisablePreview="false" DisableSliders="false" DisableInputs="false" DisableModeSwitch="true" ColorPickerMode="ColorPickerMode.HEX" PickerVariant="PickerVariant.Static" />
                        <MudButton @onclick="(()=>UpdateSchoolTag(editTag))" Color="Color.Primary" FullWidth="true" Variant="Variant.Filled">Spremi promjene</MudButton>
                        <!--Class="flex-grow-1 flex-shrink-0 mx-5"-->
                    </ChildContent>
                </MudMenu>
                

                <MudIconButton @onclick="(()=>DeleteSchoolTag(int.Parse(selectedTag.Text)))" Icon="@Icons.Material.Filled.Delete" Color="Color.Inherit" Size="Size.Small" Class="mr-5"/>
                <!--<MudButton @onclick="ClearSelection" Color="Color.Inherit" Size="Size.Small" Class="mr-5">Obriši odabir</MudButton>-->
            }
            
            <MudSpacer />
            <MudMenu>
                <ActivatorContent>
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Variant="Variant.Filled" Size="Size.Small" Class="mr-5">Dodaj</MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudText Style="color: #C6C6C6" Align="Align.Center">Dodaj Tag</MudText>
                    <MudTextField @bind-Value="newTag.Name" Class="ml-5 mr-5" AdornmentIcon="@Icons.Material.Outlined.Discount" Adornment="Adornment.Start" Placeholder="Naziv Taga" Variant="Variant.Text"></MudTextField>
                    <br/>
                    <MudColorPicker @bind-Text="newTag.Color" DisableToolbar="true" DisableAlpha="true" DisableColorField="false" DisablePreview="false" DisableSliders="false" DisableInputs="false" DisableModeSwitch="true" ColorPickerMode="ColorPickerMode.HEX" PickerVariant="PickerVariant.Static" />
                    <MudButton @onclick="(()=>CreateSchoolTag(1))" Color="Color.Primary" FullWidth="true" Variant="Variant.Filled">Dodaj Tag</MudButton>
                    <!--Class="flex-grow-1 flex-shrink-0 mx-5"-->
                </ChildContent>
            </MudMenu>
            
            <!--<MudIconButton Icon="@Icons.Material.Filled.Sort" Color="Color.Inherit"  Size="Size.Small" Class="mr-5"/>-->
        </MudToolBar>
        
        
            
        <MudText>Svi tagovi</MudText>
        <br/>
        <MudChipSet @bind-SelectedChip="selectedTag" SelectedValuesChanged="(()=>GetSelectedTag(int.Parse(selectedTag.Text)))" Filter="true" Mandatory="false">
        @foreach (var tag in schoolTags)
        {
            @if (SearchTag(tag.Name))
            {
                <MudChip Text="@tag.Id.ToString()" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Dark"  Size="Size.Medium"><MudAvatar Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"}; height:16px; width:16px")" ></MudAvatar><MudText Style="color:#FFFFFF">_</MudText>@tag.Name</MudChip>    
            }
                
        }
        </MudChipSet>
        
        
        
        
    </MudTabPanel>
    <MudTabPanel Text="Korisnici" Icon="@Icons.Material.Filled.People">
        <!--<MudIconButton @onclick="(()=>GetUsersBySchoolId(1))" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Class="mr-5"/>-->
        <MudTable Items="@userList" OnRowClick="RowClickEvent" T="User" Loading="_loadingUsers" Dense="true" Hover="true" Bordered="false" Striped="false" Filter="new Func<User,bool>(SearchUsers1)" @bind-SelectedItem="selectedUser1" SortLabel="Sortiraj prema:">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Korisnici</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Pretraži korisnike" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true" Immediate="true"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Slika</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.ReverseFullName())">Ime</MudTableSortLabel></MudTh>
                <!--<MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.PhoneNumber)">Phone number</MudTableSortLabel></MudTh>-->
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Role.Name)">Role</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>( x.Tags ))">Razred</MudTableSortLabel></MudTh>
                <!--<MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Created)">Created</MudTableSortLabel></MudTh>-->
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Slika"><MudAvatar Image="@context.ProfilePictureUrl" /></MudTd>
                <MudTd DataLabel="Ime">@(context.FirstName + " " + context.LastName)</MudTd>
                <!--<MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Phone number">@context.PhoneNumber</MudTd>-->
                <MudTd DataLabel="Role">@context.Role.Name</MudTd>
                <MudTd DataLabel="Razred">@context.Tags.Where(t => t.Type == "razred").FirstOrDefault().Name</MudTd>
                <!--<MudTd DataLabel="Created">@context.Created.ToString("dd/MM/yyyy")</MudTd>-->
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
    <!--
    <MudTabPanel Text="Škole" Icon="@Icons.Material.Filled.School" Disabled="true">
        <MudText>Content One</MudText>
    </MudTabPanel>
    -->
    <!--
    <MudTabPanel Text="Messages" Icon="@Icons.Material.Filled.Message">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Notification Services" Disabled="true" Icon="@Icons.Material.Filled.Notifications">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
    -->
</MudTabs>

}

}

@code {
    School school = new School();
    List<Tag> schoolTags = new List<Tag>();

    //private int school_id = 1;
    private MudTable<User> mudTable;

    private string searchTagString;

    private string TextValue { get; set; }
    MudChip selectedTag = null;
    public MudColor tempColor;
    Tag newTag = new Tag();
    public Tag editTag { get; set; } = new Tag();
    //public MudColor tagColor = "#00c853";

    private string searchString1 = "";
    IEnumerable<User> userList = new List<User>();
    User selectedUser1;
    private bool _loadingUsers = false;
    User appUser = new User();
    int user_id;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();

        //string authId = state.User.Claims
        //        .Where(c => c.Type.Equals("sub"))
        //        .Select(c => c.Value)
        //        .FirstOrDefault() ?? string.Empty;

        string hrEduPersonPersistentID = state.User.Claims
                                  .Where(c => c.Type.Equals("hrEduPersonPersistentID"))
                                  .Select(c => c.Value)
                                  .FirstOrDefault() ?? string.Empty;

        await GetUserId(hrEduPersonPersistentID);
        await GetUserWithTags(user_id);

        await GetSchoolTags(appUser.SchoolId);
        await GetUsersBySchoolId(appUser.SchoolId);
        newTag.Color = "#594ae2";
    }

    private async Task GetUserId(string auth0_id)
    {
        user_id = await Http.GetFromJsonAsync<int>("api/user/getuserid/" + auth0_id);
    }

    private async Task GetUserWithTags(int id)
    {
        appUser = await Http.GetFromJsonAsync<User>("api/user/getuserwithtags/" + id.ToString());
        StateHasChanged();
    }
    /*
    private void RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        Snackbar.Add((tableRowClickEventArgs.Item.FirstName), Severity.Success);
    }
    */
    
    private async Task RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        var parameters = new DialogParameters { ["user"]=tableRowClickEventArgs.Item };
        DialogOptions dialogOptions = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var dialog = DialogService.Show<AdminEditUserDialog>("Korisnik", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //Servers.RemoveAll(item => item.Id == deletedServer);

            Snackbar.Add(("Promjena podataka uspješna!"), Severity.Success);
            await GetUsersBySchoolId(appUser.SchoolId);
            StateHasChanged();
        }
        else
        {
            //Snackbar.Add(("Pogreška!"), Severity.Error);
        }
    }
    

    private bool SearchTag(string name)
    {
        
        if (string.IsNullOrWhiteSpace(searchTagString))
            return true;
        if (name.Contains(searchTagString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task RefreshTags(int id)
    {
        await GetSchoolTags(id);
        Snackbar.Add(("Refreshed tags!"), Severity.Info);
    }

    private async Task GetUsersBySchoolId(int school_id)
    {
        _loadingUsers = true;
        //userList = await Http.GetFromJsonAsync<List<User>>("api/user/getusersbyschoolid/" + school_id.ToString());
        userList = await Http.GetFromJsonAsync<List<User>>("api/user/getuserswithtags/" + school_id.ToString());
        _loadingUsers = false;
    }

    private async Task GetSelectedTag(int id)
    {
        editTag = await Http.GetFromJsonAsync<Tag>("api/school/gettagbyid/" + id.ToString());
        tempColor = editTag.Color;
    }

    private async Task GetSchoolTags(int school_id)
    {
        schoolTags = (await Http.GetFromJsonAsync<List<Tag>>("api/school/getschooltags/" + school_id.ToString())).FindAll(t => t.Type == "opcenito");
        StateHasChanged();
    }

    async void ClearSelection()
    {
        selectedTag = null;
    }

    private async Task CreateSchoolTag(int school_id)
    {
        newTag.SchoolId = school_id;
        //newTag.Type = "općenito";
        newTag.Type = "opcenito";

        if (newTag.Color != null && newTag.Color[0] == '#' && newTag.Color.Length == 7 && newTag.Name != null)
        {
            using var response = await Http.PostAsJsonAsync("api/school/createschooltag", newTag);
            response.EnsureSuccessStatusCode();
            Snackbar.Add(("Added tag '" + newTag.Name + "' !"), Severity.Success);
        }
        else
        {
            Snackbar.Add("Error adding tag '" + newTag.Name + "'!", Severity.Error);
        }


        newTag = new Tag();
        await GetSchoolTags(school_id);

    }

    private async Task UpdateSchoolTag(Tag tag)
    {
        //Tag tag = new Tag();
        //tag.Name = editTag.Name;
        //tag.Color = editTag.Color;
        //editTag.Color = tempColor.Value;

        if (tag.Color != null && tag.Color[0] == '#' && tag.Color.Length == 7 && tag.Name != null && tag.Name != "")
        {
            using var response = await Http.PutAsJsonAsync("api/school/updateschooltag/" + tag.Id.ToString(), tag);
            response.EnsureSuccessStatusCode();
            editTag = new Tag();
            selectedTag = null;
            Snackbar.Add(("Edited tag '" + tag.Name + "' !"), Severity.Success);
        }
        else
        {
            Snackbar.Add("Error editing tag '" + tag.Name + "'!", Severity.Error);
        }

        
        await GetSchoolTags(tag.SchoolId);
    }

    private async Task DeleteSchoolTag(int tag_id)
    {

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Jeste li sigurni da želite obrisati tag? Ovaj je proces nepovratan.");
        parameters.Add("ButtonText", "Obriši");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteTagDialog>("Obriši tag", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            using var response = await Http.DeleteAsync("api/school/deleteschooltag/" + tag_id.ToString());
            selectedTag = null;
            await GetSchoolTags(1);    
            Snackbar.Add(("Deleted tag!"), Severity.Success);
        }
        
    }

    private bool SearchUsers1(User user) => SearchUsers(user, searchString1);

    private bool SearchUsers(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{user.Id} {user.Id}".Contains(searchString))
            return true;
        return false;
    }

}
