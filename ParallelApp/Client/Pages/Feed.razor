@page "/feed"
@using ParallelApp.Shared.Models
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>Feed</PageTitle>
<!--
<MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
    <MudChipSet @bind-SelectedChip="selected" Filter="true" Mandatory="true">
            <MudChip Text="grey" Value="1" Default="true">Default</MudChip>
            <MudChip Text="purple" Color="Color.Primary">Primary</MudChip>
            <MudChip Text="pink" Color="Color.Secondary">Secondary</MudChip>
            <MudChip Text="blue" Color="Color.Info">Info</MudChip>
            <MudChip Text="green" Color="Color.Success">Success</MudChip>
            <MudChip Text="orange" Color="Color.Warning">Warning</MudChip>
            <MudChip Text="red" Color="Color.Error">Error</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
        </MudChipSet>
</MudAppBar>

<MudTabs Elevation="4" Rounded="true" Color="@Color.Secondary">
    <MudTabPanel Text="One" />
    <MudTabPanel Text="Two" />
    <MudTabPanel Text="Three" />
    <MudTabPanel Text="Four" />
    <MudTabPanel Text="Five" />
    <MudTabPanel Text="Six" />
    <MudTabPanel Text="Seven" />
    <MudTabPanel Text="Eight" />
    <MudTabPanel Text="Nine" />
    <MudTabPanel Text="Ten" />
    <MudTabPanel Text="Eleven" />
    <MudTabPanel Text="Thirteen" />
</MudTabs>

<MudPaper Elevation="25">
    <MudToolBar>
        <MudChipSet @bind-SelectedChip="selected" Filter="true" Mandatory="true">
            <MudChip Text="grey" Value="1" Default="true">Default</MudChip>
            <MudChip Text="purple" Color="Color.Primary">Primary</MudChip>
            <MudChip Text="pink" Color="Color.Secondary">Secondary</MudChip>
            <MudChip Text="blue" Color="Color.Info">Info</MudChip>
            <MudChip Text="green" Color="Color.Success">Success</MudChip>
            <MudChip Text="orange" Color="Color.Warning">Warning</MudChip>
            <MudChip Text="red" Color="Color.Error">Error</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
        </MudChipSet>
    </MudToolBar>
</MudPaper>

-->

<h3>Feed</h3>
<MudFab @onclick="(()=>NewMessage(appUser))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconSize="Size.Large"/>
<br/>

@if(userFeed.Count() == 0)
{
    @for(int i = 0; i < 5; i++)
    {
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px"/>
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
        </MudCard>
        <br/>
    }
    
}

@foreach(var message in userFeed)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@message.Subject</MudText>
                <MudGrid>
                    <MudItem xs=9>
                        <MudText>@message.SenderUserId</MudText>
                    </MudItem>
                    <MudItem xs=3>
                        <MudText>@message.Created</MudText>
                    </MudItem>
                </MudGrid>
                @foreach(var tag in message.Tags)
                {
                    <MudChip Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"};")" Size="Size.Small">@tag.Name</MudChip> 
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Edit message" Placement="Placement.Left" Color="Color.Primary" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText>@message.Content</MudText>
            <!--<MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>-->
            
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
        </MudCardActions>
    </MudCard>

    <br/>
}




@code {
    //MudChip selected;
    int school_id = 1;
    int user_id = 2;
    User appUser = new User();
    List<Message> userFeed = new List<Message>();

    protected override async Task OnInitializedAsync()
    {
        await GetUserWithTags(user_id);
        await GetUserFeed(appUser.Id);
    }

    private async Task GetUserWithTags(int id)
    {
        appUser = await Http.GetFromJsonAsync<User>("api/user/getuserwithtags/" + id.ToString());
        StateHasChanged();
    }

    private async Task GetUserFeed(int id)
    {
        userFeed = await Http.GetFromJsonAsync<List<Message>>("api/message/getuserfeed/" + id.ToString());
        //userTags = await Http.GetFromJsonAsync<List<Tag>>("api/user/getusertags/" + id.ToString());
    }

    private async Task NewMessage(User postingUser)
    {
        var parameters = new DialogParameters { ["postingUser"]=postingUser };
        DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var dialog = DialogService.Show<NewMessageDialog>("Create new message", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //Servers.RemoveAll(item => item.Id == deletedServer);

            Snackbar.Add(("Posted Message!"), Severity.Success);
            await GetUserFeed(appUser.Id);
            StateHasChanged();
        }
        else
        {
            
        }
    }
}
