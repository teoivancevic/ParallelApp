@page "/feed"
<!--page "/feed/{user_id:int}"-->

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]  

@inject AuthenticationStateProvider AuthState
@using ParallelApp.Client.ViewModels
@using ParallelApp.Shared.Models
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LogoutToken LogoutToken
@using StackExchange.Redis

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.Web
@using System.Text.RegularExpressions;
@using Microsoft.Extensions.Configuration


<PageTitle>Objave</PageTitle>
<!--
    //UI za Redis PubSub testiranje
<MudTextField @bind-Value="pubString"></MudTextField>
<MudButton @onclick="(()=>Publish(pubString))">Publish</MudButton>
<MudButton @onclick="Subscribe">Subscribe</MudButton>
-->

<MudToolBar>
    <MudText Typo="Typo.h4">Objave</MudText>
    <MudSpacer/>
    <MudTextField @bind-Value="searchString" Class="ml-3 mr-3" Immediate="true" AdornmentIcon="@Icons.Material.Outlined.Search" Adornment="Adornment.Start" Margin="Margin.Dense" Placeholder="Pretraži poruke" Variant="Variant.Outlined" Clearable="true"></MudTextField>

    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
        <MudButton @onclick="(()=>NewMessage(appUser))" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">Nova poruka</MudButton>  
    </MudHidden>

</MudToolBar>



<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
    <MudFab @onclick="(()=>NewMessage(appUser))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconSize="Size.Large" Style="position:fixed; bottom: calc(75px + 10px); right: 10px; z-index: 999; height:60px; width:60px;"/>  
</MudHidden>
@*
<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
    <MudButton @onclick="(()=>NewMessage(appUser))" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Style="position:absolute; top: 88px; right: 20px; z-index: 999;">Nova poruka</MudButton>  
</MudHidden>
*@


<br/>


@if(userFeed.Count() == 0)
{
    @for(int i = 0; i < 5; i++)
    {
        <MudCard>
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px"/>
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
        </MudCard>
        <br/>
    }
    
}

@if(userFeed.Count != 0)
{

@foreach(var message in userFeed)
{
    @if (SearchMessage(message))
    {
        
    
    <MudCard>
        <!--
        <MudCardHeader>
            <CardHeaderContent>
                
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Edit message" Placement="Placement.Left" Color="Color.Info" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        -->
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@message.Subject</MudText>
                <MudGrid>
                    <MudItem xs=6>
                        <MudText>@message.SenderUser.FullName()</MudText>
                    </MudItem>
                    <MudItem xs=6>
                        <MudText Class="d-flex justify-end flex-grow-1"><MudIcon Icon="@Icons.Filled.AccessTimeFilled" Color="Color.Primary" Size="Size.Small"></MudIcon> @message.GetFormattedTime()</MudText>
                    </MudItem>
                </MudGrid>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @*
            <MudText Typo="Typo.h5">@message.Subject</MudText>
            <MudGrid>
                <MudItem xs=6>
                    <MudText>@message.SenderUser.FullName()</MudText>
                </MudItem>
                <MudItem xs=6>
                    <MudText Class="d-flex justify-end flex-grow-1"><MudIcon Icon="@Icons.Filled.AccessTimeFilled" Color="Color.Primary" Size="Size.Small"></MudIcon> @message.GetFormattedTime()</MudText>
                </MudItem>
            </MudGrid>
            *@
            
            @((MarkupString)Regex.Replace(
                Regex.Replace(@message.Content, "((https?://)?www\\.[^\\s]+)", "<a href=\"$1\">$1</a>"), "\r?\n|\r", "<br />"))
            
            
        </MudCardContent>
        
        <MudCardActions>            
            @*<MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Default"/>*@
            
            <MudGrid>
                <MudItem xs=12>
                    @foreach(var tag in message.Tags)
                    {
                        <MudChip Style="@($"background: {tag.GetColor()}; color:{"#FFFFFF"};")" Size="Size.Small">@tag.Name</MudChip> 
                    }
                </MudItem>
            </MudGrid>
            
            
        </MudCardActions>
        
    </MudCard>

    <br/>
    }
}

}



@code {
    //MudChip selected;
    FeedViewModel _feedViewModel = new FeedViewModel();

    int school_id = 1;
    string authId = "";
    string hrEduPersonPersistentID = "";
    //[Parameter] public int user_id { get; set; }
    public int user_id;
    User appUser = new User();
    List<Message> userFeed = new List<Message>();

    string pubString = "test";
    private string searchString;


    [Inject]
    IAccessTokenProvider TokenProvider { get; set; }

    protected override async Task OnInitializedAsync()
    //private async Task OnStart(string authId)
    {
        var state = await AuthState.GetAuthenticationStateAsync();

        if(state.User.Identity.IsAuthenticated)
        {
            var accessTokenResult = await TokenProvider.RequestAccessToken();
            if(accessTokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(accessTokenResult.RedirectUrl);
            }

            if(accessTokenResult.TryGetToken(out var token))
            {
                LogoutToken.SetToken(token.Value);
            }
        }

        authId = state.User.Claims
                .Where(c => c.Type.Equals("sub"))
                .Select(c => c.Value)
                .FirstOrDefault() ?? string.Empty;

        hrEduPersonPersistentID = state.User.Claims
                                  .Where(c => c.Type.Equals("hrEduPersonPersistentID"))
                                  .Select(c => c.Value)
                                  .FirstOrDefault() ?? string.Empty;
        //context.User.Claims.FirstOrDefault(c => c.Type == "sub").Value
        //authId = User.Claims.FirstOrDefault(c => c.Type == "sub").Value;
        // wait GetUserId("auth0|6223f24c5236eb0069e8f270");
        //         await GetUserId(authId);
        //await GetUserId(User.Claims.FirstOrDefault(c => c.Type == "sub").Value);
        //await GetUserId(authId);
        await GetUserId(hrEduPersonPersistentID);
        await GetUserWithTags(user_id);
        await GetUserFeed(appUser.Id);

        await base.OnInitializedAsync();
    }

    ISubscriber sub;

    private void Subscribe()
    {
        using (ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("127.0.0.1:6379"))
        {
            sub = redis.GetSubscriber();

            //Subscribe to the channel named messages

            sub.Subscribe("messages", (channel, message) => {

                //Output received message
                //Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] {message}");
                Snackbar.Add(($"{message}"), Severity.Success);
            });
            //Console.WriteLine ("subscribed messages");
            //Console.ReadKey();
        }
    }

    private void Publish(string input)
    {
        using (ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("127.0.0.1:6379"))
        {
            sub = redis.GetSubscriber();

            do
            {
                //input = Console.ReadLine();
                sub.Publish("messages", input);
            } while (input != "exit");
        }
    }

    private async Task GetUserId(string auth0_id)
    {
        user_id = await Http.GetFromJsonAsync<int>("api/user/getuserid/" + auth0_id);
    }

    private async Task GetUserWithTags(int id)
    {
        appUser = await Http.GetFromJsonAsync<User>("api/user/getuserwithtags/" + id.ToString());
        StateHasChanged();
    }

    private async Task GetUserFeed(int id)
    {
        userFeed = await Http.GetFromJsonAsync<List<Message>>("api/message/getuserfeed/" + id.ToString());
        //userTags = await Http.GetFromJsonAsync<List<Tag>>("api/user/getusertags/" + id.ToString());
    }

    private async Task NewMessage(User postingUser)
    {
        var parameters = new DialogParameters { ["postingUser"]=postingUser };
        DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        var dialog = DialogService.Show<NewMessageDialog>("Create new message", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //Servers.RemoveAll(item => item.Id == deletedServer);

            Snackbar.Add(("Posted Message!"), Severity.Success);
            await GetUserFeed(appUser.Id);
            StateHasChanged();
        }
        else
        {
            
        }
    }

    private bool SearchMessage(Message message)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (message.Subject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (message.Content.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (message.SenderUser.FullName().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
